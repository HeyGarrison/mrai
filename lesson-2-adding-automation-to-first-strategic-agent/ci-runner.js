import { CodeReviewer } from './code-reviewer.js';
import { Octokit } from '@octokit/rest';
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Use our existing CodeReviewer with thorough config for PRs
const reviewer = new CodeReviewer('thorough');

// Set up GitHub API client
const github = new Octokit({
  auth: process.env.GITHUB_TOKEN
});

// Get GitHub Actions environment variables
const prNumber = process.env.PR_NUMBER;
const repoOwner = process.env.GITHUB_REPOSITORY_OWNER;
const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
const baseRef = process.env.GITHUB_BASE_REF;

async function runPRReview() {
  console.log(`🔍 Reviewing PR #${prNumber}`);

  try {
    // Get changed files using git diff
    const changedFiles = getChangedFiles();

    // Filter for files our existing reviewer can handle
    const reviewableFiles = changedFiles.filter(shouldReviewFile);

    if (reviewableFiles.length === 0) {
      console.log('No reviewable files found');
      await postSummaryComment([], 0);
      return;
    }

    console.log(`Found ${reviewableFiles.length} files to review: ${reviewableFiles.join(', ')}`);

    // Use our existing reviewer for each file
    const reviewResults = [];
    for (const filename of reviewableFiles) {
      console.log(`📋 Reviewing ${filename}...`);

      // This is our existing CodeReviewer in action!
      const result = await reviewer.reviewFile(filename);

      if (result.error) {
        console.log(`⚠️ Error reviewing ${filename}: ${result.error}`);
        continue;
      }

      // Post the review as a GitHub comment
      await postFileComment(filename, result.analysis);

      reviewResults.push({
        filename,
        hasIssues: hasSignificantIssues(result.analysis)
      });
    }

    // Post summary
    await postSummaryComment(reviewResults, reviewableFiles.length);

  } catch (error) {
    console.error('Error during PR review:', error);
    process.exit(1);
  }
}

function getChangedFiles() {
  try {
    const output = execSync(`git diff --name-only origin/${baseRef}...HEAD`, {
      encoding: 'utf8'
    });

    return output.trim().split('\n').filter(file => file && fs.existsSync(file));
  } catch (error) {
    console.error('Error getting changed files:', error);
    return [];
  }
}

function shouldReviewFile(filename) {
  // Use the same extensions our CodeReviewer supports
  const reviewableExtensions = ['.js', '.ts', '.jsx', '.tsx', '.py', '.go', '.rs'];
  if (!reviewableExtensions.includes(path.extname(filename))) {
    return false;
  }

  // Skip generated/vendor files
  const skipPatterns = ['node_modules/', 'dist/', 'build/', '.min.js', 'vendor/'];
  return !skipPatterns.some(pattern => filename.includes(pattern));
}

function hasSignificantIssues(analysis) {
  // Simple check for priority indicators
  const issueIndicators = ['Priority: High', 'Security Issue', 'Bug:', 'SQL injection', 'XSS'];
  return issueIndicators.some(indicator =>
    analysis.toLowerCase().includes(indicator.toLowerCase())
  );
}

async function postFileComment(filename, analysis) {
  const commentBody = `## 🤖 AI Code Review: \`${filename}\`

${analysis}

---
*Generated by automated code review. Please review suggestions and apply fixes as appropriate.*`;

  try {
    await github.rest.issues.createComment({
      owner: repoOwner,
      repo: repoName,
      issue_number: prNumber,
      body: commentBody
    });

    console.log(`✅ Posted review comment for ${filename}`);

  } catch (error) {
    console.error(`Failed to post comment for ${filename}:`, error);
  }
}

async function postSummaryComment(reviewResults, totalFiles) {
  const filesWithIssues = reviewResults.filter(r => r.hasIssues).length;
  const emoji = filesWithIssues > 0 ? '⚠️' : '✅';

  const summaryBody = `## ${emoji} AI Code Review Summary

**Files Reviewed:** ${totalFiles}
**Files with Potential Issues:** ${filesWithIssues}

${filesWithIssues > 0
      ? '**Recommendation:** Please review the flagged issues before merging.'
      : '**Great job!** No significant issues detected.'
    }

---
*This review uses the same analysis as our local code reviewer tool.*`;

  try {
    await github.rest.issues.createComment({
      owner: repoOwner,
      repo: repoName,
      issue_number: prNumber,
      body: summaryBody
    });

    console.log('✅ Posted summary comment');

  } catch (error) {
    console.error('Failed to post summary comment:', error);
  }
}

// Run the review
runPRReview().catch(console.error);

